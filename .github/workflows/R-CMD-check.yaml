on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          - {os: macOS-latest, r: 'release'}
          - {os: macOS-latest, r: 'devel'}
          - {os: ubuntu-20.04, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      _R_CHECK_FORCE_SUGGESTS_: false
      GITHUB_PAT: ${{ secrets.INSTALL_GITHUB_PAT }}
      RSPM: ${{ matrix.config.rspm }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup MSYS2 on Windows
        if: runner.os == 'Windows' && steps.cache-slim.outputs.cache-hit != 'true'
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          update: true
          install: >-
           git
           unzip
           base-devel
           msys2-devel
           mingw-w64-x86_64-toolchain
           mingw-w64-x86_64-cmake

      - name: Download SLiM on Windows
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          cd /d/a
          wget http://benhaller.com/slim/SLiM.zip

      - name: Download SLiM on non-Windows
        if: runner.os != 'Windows'
        run: |
          cd ${{ github.workspace }}
          wget http://benhaller.com/slim/SLiM.zip

      - name: Cache SLiM
        id: cache-slim
        uses: actions/cache@v2
        with:
          path: |
            ${{ github.workspace }}/SLiM_build
            ${{ github.workspace }}/SLiM
          key: ${{ runner.os }}-build_SLiM-${{ hashFiles('SLiM.zip') }}

      - name: Setup cmake on non-Windows
        if: runner.os != 'Windows'
        uses: jwlawson/actions-setup-cmake@v1.9
        with:
          github-api-token: ${{ secrets.INSTALL_GITHUB_PAT }}

      - name: Install SLiM on Windows Part 1
        if: runner.os == 'Windows' && steps.cache-slim.outputs.cache-hit != 'true'
        shell: msys2 {0}
        run: |
          cd /d/a
          unzip -o SLiM.zip
          cd SLiM/windows_compat/gnulib
          touch --date="`date`" aclocal.m4 Makefile.am configure configure.ac config.h.in Makefile.in
          cd ../../..
          mkdir SLiM_build
          cd SLiM_build
          cmake -G"MSYS Makefiles" -DCMAKE_BUILD_TYPE=Release ../SLiM
          make -j 2

      - name: Install SLiM on Windows Part 2
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          cd /d/a
          cd SLiM_build
          make install
          cd ..
          rm SLiM.zip

      - name: Install SLiM on non-Windows Part 1
        if: runner.os != 'Windows' && steps.cache-slim.outputs.cache-hit != 'true'
        run: |
          cd ${{ github.workspace }}
          unzip -o SLiM.zip
          mkdir SLiM_build
          cd SLiM_build
          cmake -DCMAKE_BUILD_TYPE=Release ../SLiM
          make

      - name: Install SLiM on non-Windows Part 2
        if: runner.os != 'Windows'
        run: |
          cd ${{ github.workspace }}/SLiM_build
          sudo make install
          cd ..
          rm SLiM.zip

      - name: Install macOS system dependencies
        if: runner.os == 'macOS'
        run: |
          brew install gdal

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck
          needs: check

      - uses: r-lib/actions/check-r-package@v2
        if: runner.os = 'Windows'
        env:
          SLIM_HOME: 'C:/Program Files (x86)/SLiM/bin'
        with:
          args: 'c("--no-manual", "--as-cran")'
          error-on: '"error"'

      - uses: r-lib/actions/check-r-package@v2
        if: runner.os != 'Windows'
        with:
          args: 'c("--no-manual", "--as-cran")'
          error-on: '"error"'

      - name: Upload test objects for covr
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@master
        with:
          name: covr-test-objects
          path: ~/covr_test_objects
          retention-days: 1

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check

  test-coverage:
    runs-on: macOS-latest
    needs: R-CMD-check
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      _R_CHECK_FORCE_SUGGESTS_: false
      GITHUB_PAT: ${{ secrets.INSTALL_GITHUB_PAT }}
    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@master

      - uses: r-lib/actions/setup-pandoc@master

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
        shell: Rscript {0}

      - name: Cache R packages
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: macOS-r-4.0-1-v1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: macOS-r-4.0-1-v1-

      - name: Install dependencies
        run: |
          install.packages(c("remotes"))
          remotes::install_deps(dependencies = TRUE)
          remotes::install_bioc("Biostrings")
          remotes::install_cran("covr")
        shell: Rscript {0}

      - name: Download SLiM
        run: |
          cd ${{ github.workspace }}
          wget http://benhaller.com/slim/SLiM.zip

      - name: Cache SLiM
        id: cache-slim
        uses: actions/cache@v2
        with:
          path: |
            ${{ github.workspace }}/SLiM_build
            ${{ github.workspace }}/SLiM
          key: ${{ runner.os }}test-coverage-build_SLiM-${{ hashFiles('SLiM.zip') }}

      - name: Install SLiM Part 1
        if: steps.cache-slim.outputs.cache-hit != 'true'
        run: |
          cd ${{ github.workspace }}
          unzip -o SLiM.zip
          mkdir SLiM_build
          cd SLiM_build
          cmake -DCMAKE_BUILD_TYPE=Release ../SLiM
          make

      - name: Install SLiM Part 2
        run: |
          cd ${{ github.workspace }}/SLiM_build
          sudo make install
          cd ..
          rm SLiM.zip

      - name: Download test objects for covr
        uses: actions/download-artifact@master
        with:
          name: covr-test-objects
          path: ~/covr_test_objects

      - name: Test coverage
        run: |
          codecovr_try <- try(covr::codecov(quiet = FALSE, clean = FALSE,
          line_exclusions = "R/slim_lang.R"))
          if(inherits(codecovr_try, "try-error"))
          {
          dir.create("coverage_results")
          file.copy(list.files(tempdir(), full.names = TRUE), "coverage_results", recursive = TRUE)
          print(codecovr_try)
          quit(status = 1L)
          }
        shell: Rscript {0}

      - name: Upload coverage results
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: coverage-results
          path: coverage_results
