on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          - {os: macOS-latest, r: 'release'}
          - {os: macOS-latest, r: 'devel'}
          - {os: ubuntu-16.04, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      _R_CHECK_FORCE_SUGGESTS_: false
      GITHUB_PAT: ${{ secrets.INSTALL_GITHUB_PAT }}
      RSPM: ${{ matrix.config.rspm }}

    steps:
      - uses: actions/checkout@v2

      - name: Install WSL
        if: runner.os == 'Windows'
        uses: Vampire/setup-wsl@v1
        with:
          distribution: Ubuntu-18.04

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@master

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        env:
          RHUB_PLATFORM: linux-x86_64-ubuntu-gcc
        run: |
          Rscript -e "remotes::install_github('r-hub/sysreqs')"
          sysreqs=$(Rscript -e "cat(sysreqs::sysreq_commands('DESCRIPTION'))")
          sudo -s eval "$sysreqs"

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      - name: Download SLiM on Windows
        if: runner.os == 'Windows'
        shell: wsl-bash {0}
        run: |
          cd `wslpath -a '${{ github.workspace }}'`
          wget http://benhaller.com/slim/SLiM.zip

      - name: Download SLiM on non-Windows
        if: runner.os != 'Windows'
        run: |
          cd ${{ github.workspace }}
          wget http://benhaller.com/slim/SLiM.zip

      - name: Cache SLiM
        id: cache-slim
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/SLiM_build
          key: ${{ runner.os }}-build_SLiM-${{ hashFiles('SLiM.zip') }}

      - name: Install SLiM on Windows Part 1
        if: runner.os == 'Windows' && steps.cache-slim.outputs.cache-hit != 'true'
        shell: wsl-bash {0}
        run: |
          sudo apt update
          sudo apt-get -y install unzip
          sudo apt-get -y install build-essential
          sudo apt-get -y install cmake
          cd `wslpath -a '${{ github.workspace }}'`
          unzip -o SLiM.zip
          mkdir SLiM_build
          cd SLiM_build
          cmake -DCMAKE_BUILD_TYPE=Release ../SLiM
          make

      - name: Install SLiM on Windows Part 2
        if: runner.os == 'Windows'
        shell: wsl-bash {0}
        run: |
          cd `wslpath -a '${{ github.workspace }}/SLiM_build'`
          sudo make install
          cd ..
          rm -r SLiM
          rm SLiM.zip

      - name: Install SLiM on non-Windows Part 1
        if: runner.os != 'Windows' && steps.cache-slim.outputs.cache-hit != 'true'
        run: |
          cd ${{ github.workspace }}
          unzip -o SLiM.zip
          mkdir SLiM_build
          cd SLiM_build
          cmake -DCMAKE_BUILD_TYPE=Release ../SLiM
          make

      - name: Install SLiM on non-Windows Part 2
        if: runner.os != 'Windows'
        run: |
          cd ${{ github.workspace }}/SLiM_build
          sudo make install
          cd ..
          rm -r SLiM
          rm SLiM.zip

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "error", check_dir = "check")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check

  test-coverage:
    runs-on: macOS-latest
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      _R_CHECK_FORCE_SUGGESTS_: false
      GITHUB_PAT: ${{ secrets.INSTALL_GITHUB_PAT }}
    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@master

      - uses: r-lib/actions/setup-pandoc@master

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
        shell: Rscript {0}

      - name: Cache R packages
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: macOS-r-4.0-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: macOS-r-4.0-1-

      - name: Install dependencies
        run: |
          install.packages(c("remotes"))
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("covr")
        shell: Rscript {0}

      - name: Install SLiM on non-Windows
        run: |
          wget http://benhaller.com/slim/SLiM.zip
          unzip -o SLiM.zip
          mkdir SLiM_build
          cd SLiM_build
          cmake -DCMAKE_BUILD_TYPE=Release ../SLiM
          make
          sudo make install
          cd ..
          rm -r SLiM
          rm SLiM.zip

      - name: Test coverage
        run: |
          codecovr_try <- try(covr::codecov(quiet = FALSE, clean = FALSE))
          if(inherits(codecovr_try, "try_error"))
          {
          dir.create("coverage_results")
          file.copy(list.files(tempdir(), full.names = TRUE), coverage_results, recursive = TRUE)
          print(codecovr_try)
          quit(status = 1L)
          }
        shell: Rscript {0}

      - name: Upload coverage results
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: coverage-results
          path: coverage_results
