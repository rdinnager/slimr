% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/slim_lang.R
\name{eidos_defineGlobal}
\alias{eidos_defineGlobal}
\alias{Eidos$defineGlobal}
\alias{.E$defineGlobal}
\title{Eidos method defineGlobal}
\usage{
eidos_defineGlobal(symbol, value)
}
\arguments{
\item{symbol}{An object of type string or any. Must be of length 1 (a
singleton). See details for description.}

\item{value}{An object of type string or any. See details for description.}
}
\value{
An object of type void.
}
\description{
Documentation for Eidos function \code{defineGlobal}, which is a method of
\code{\link{Eidos}}.
Note that the R function is a stub, it does not do anything in R (except bring
up this documentation). It will only do
anything useful when used inside a \code{\link{slim_block}} function further
nested in a \code{\link{slim_script}}
function call, where it will be translated into valid SLiM code as part of a
full SLiM script.
}
\details{
Documentation for this function can be found in the official
\href{http://benhaller.com/slim/SLiM_Manual.pdf#page=NA}{SLiM manual: page NA}.

Defines a new global variable with the name symbol and the value
specified by value. The name cannot previously be defined as a constant. The
result is similar to a standard variable assignment with operator =, except that
the variable is always defined in the global scope (even if the defineGlobal()
call is made inside a user-defined function or other locally-scoped block, such
as a SLiM event or callback). This means that the variable will remain defined
even after the current scope is exited. Note that global variables can be hidden
by local variables with the same name; unlike defined constants, such scoped
masking is allowed. Syntactically, value may be any value at all; semantically,
however, if value is of object type then value's class must be under an internal
memory-management scheme called "retain-release". Objects that are not under
retain-release can cease to exist whenever the Context is finished using them,
and thus a global variable referencing such an object could become invalid,
which must be 80 prevented. Objects that are under retain-release will not
cease to exist if they are referenced by a global variable; the reference to
them from the global variable "retains" them and keeps them in existence. All
object classes built into Eidos are under retain-release; see the SLiM manual
(section "SLiM scoping rules") for discussion of which SLiM object classes are
under retain-release. Section 4.5 of this manual discusses this topic further.
(vNlifso)doCall(string$ functionName, ...) Returns the results from a call to a
specified function. The function named by the parameter functionName is called,
and the remaining parameters to doCall() are forwarded on to that function
verbatim. This can be useful for calling one of a set of similar functions, such
as sin(), cos(), etc., to perform a math function determined at runtime, or one
of the as...() family of functions to convert to a type determined at runtime.
Note that named arguments and default arguments, beyond the functionName
argument, are not supported by doCall(); all arguments to the target function
must be specified explicitly, without names. (vNlifso)executeLambda(string$
lambdaSource, [ls$ timed = F]) Executes a block of Eidos code defined by
lambdaSource. Eidos allows you to execute lambdas: blocks of Eidos code which
can be called directly within the same scope as the caller. Eidos lambdas do not
take arguments; for this reason, they are not first-class functions. (Since they
share the scope of the caller, however, you may effectively pass values in and
out of a lambda using variables.) The string argument lambdaSource may contain
one or many Eidos statements as a single string value. Lambdas are represented,
to the caller, only as the source code string lambdaSource; the executable
code is not made available programmatically. If an error occurs during the
tokenization, parsing, or execution of the lambda, that error is raised as
usual; executing code inside a lambda does not provide any additional protection
against exceptions raised. The return value produced by the code in the lambda
is returned by executeLambda(). If the optional parameter timed is T, the total
(CPU clock) execution time for the lambda will be printed after the lambda has
completed (see clock()); if it is F (the default), no timing information will be
printed. The timed parameter may also be "cpu" or "mono" to specifically request
timing with the CPU clock (which will count the usage across all cores, and
may thus run faster than wall clock time if multiple cores are being utilized)
or the monotonic clock (which will correspond, more or less, to elapsed wall
clock time regardless of multithreading); see the documentation for clock()
for further discussion of these timing options. The current implementation
of executeLambda() caches a tokenized and parsed version of lambdaSource,
so calling executeLambda() repeatedly on a single source string is much more
efficient than calling executeLambda() with a newly constructed string each
time. If you can use a string literal for lambdaSource, or reuse a constructed
source string stored in a variable, that will improve performance considerably.
}
\section{Copyright}{

This is documentation for a function in the SLiM software, and has been
reproduced from the official manual,
which can be found here: \url{http://benhaller.com/slim/SLiM_Manual.pdf}. This
documentation is
Copyright Â© 2016-2020 Philipp Messer. All rights reserved. More information
about SLiM can be found
on the official website: \url{https://messerlab.org/slim/}
}

\seealso{
Other Eidos: 
\code{\link{E}},
\code{\link{eidos_abs}()},
\code{\link{eidos_acos}()},
\code{\link{eidos_all}()},
\code{\link{eidos_any}()},
\code{\link{eidos_apply}()},
\code{\link{eidos_array}()},
\code{\link{eidos_asFloat}()},
\code{\link{eidos_asInteger}()},
\code{\link{eidos_asLogical}()},
\code{\link{eidos_asString}()},
\code{\link{eidos_asin}()},
\code{\link{eidos_assert}()},
\code{\link{eidos_atan}()},
\code{\link{eidos_atan2}()},
\code{\link{eidos_beep}()},
\code{\link{eidos_c}()},
\code{\link{eidos_cat}()},
\code{\link{eidos_catn}()},
\code{\link{eidos_cbind}()},
\code{\link{eidos_ceil}()},
\code{\link{eidos_citation}()},
\code{\link{eidos_clock}()},
\code{\link{eidos_cmColors}()},
\code{\link{eidos_color2rgb}()},
\code{\link{eidos_colors}()},
\code{\link{eidos_cor}()},
\code{\link{eidos_cos}()},
\code{\link{eidos_cov}()},
\code{\link{eidos_createDirectory}()},
\code{\link{eidos_cumProduct}()},
\code{\link{eidos_cumSum}()},
\code{\link{eidos_date}()},
\code{\link{eidos_dbeta}()},
\code{\link{eidos_debugIndent}()},
\code{\link{eidos_defineConstant}()},
\code{\link{eidos_deleteFile}()},
\code{\link{eidos_dexp}()},
\code{\link{eidos_dgamma}()},
\code{\link{eidos_diag}()},
\code{\link{eidos_dim}()},
\code{\link{eidos_dmvnorm}()},
\code{\link{eidos_dnorm}()},
\code{\link{eidos_drop}()},
\code{\link{eidos_elementType}()},
\code{\link{eidos_exists}()},
\code{\link{eidos_exp}()},
\code{\link{eidos_fileExists}()},
\code{\link{eidos_filesAtPath}()},
\code{\link{eidos_findInterval}()},
\code{\link{eidos_float}()},
\code{\link{eidos_floor}()},
\code{\link{eidos_flushFile}()},
\code{\link{eidos_format}()},
\code{\link{eidos_functionSignature}()},
\code{\link{eidos_functionSource}()},
\code{\link{eidos_getSeed}()},
\code{\link{eidos_getwd}()},
\code{\link{eidos_heatColors}()},
\code{\link{eidos_hsv2rgb}()},
\code{\link{eidos_identical}()},
\code{\link{eidos_ifelse}()},
\code{\link{eidos_integer}()},
\code{\link{eidos_integerDiv}()},
\code{\link{eidos_integerMod}()},
\code{\link{eidos_isFinite}()},
\code{\link{eidos_isFloat}()},
\code{\link{eidos_isInfinite}()},
\code{\link{eidos_isInteger}()},
\code{\link{eidos_isLogical}()},
\code{\link{eidos_isNAN}()},
\code{\link{eidos_isNULL}()},
\code{\link{eidos_isObject}()},
\code{\link{eidos_isString}()},
\code{\link{eidos_length}()},
\code{\link{eidos_license}()},
\code{\link{eidos_log}()},
\code{\link{eidos_log10}()},
\code{\link{eidos_log2}()},
\code{\link{eidos_logical}()},
\code{\link{eidos_lowerTri}()},
\code{\link{eidos_ls}()},
\code{\link{eidos_match}()},
\code{\link{eidos_matrix}()},
\code{\link{eidos_matrixMult}()},
\code{\link{eidos_max}()},
\code{\link{eidos_mean}()},
\code{\link{eidos_min}()},
\code{\link{eidos_nchar}()},
\code{\link{eidos_ncol}()},
\code{\link{eidos_nrow}()},
\code{\link{eidos_object}()},
\code{\link{eidos_order}()},
\code{\link{eidos_paste}()},
\code{\link{eidos_paste0}()},
\code{\link{eidos_pmax}()},
\code{\link{eidos_pmin}()},
\code{\link{eidos_pnorm}()},
\code{\link{eidos_print}()},
\code{\link{eidos_product}()},
\code{\link{eidos_qnorm}()},
\code{\link{eidos_quantile}()},
\code{\link{eidos_rainbow}()},
\code{\link{eidos_range}()},
\code{\link{eidos_rank}()},
\code{\link{eidos_rbeta}()},
\code{\link{eidos_rbind}()},
\code{\link{eidos_rbinom}()},
\code{\link{eidos_rcauchy}()},
\code{\link{eidos_rdunif}()},
\code{\link{eidos_readCSV}()},
\code{\link{eidos_readFile}()},
\code{\link{eidos_rep}()},
\code{\link{eidos_repEach}()},
\code{\link{eidos_rev}()},
\code{\link{eidos_rexp}()},
\code{\link{eidos_rf}()},
\code{\link{eidos_rgamma}()},
\code{\link{eidos_rgb2color}()},
\code{\link{eidos_rgb2hsv}()},
\code{\link{eidos_rgeom}()},
\code{\link{eidos_rlnorm}()},
\code{\link{eidos_rm}()},
\code{\link{eidos_rmvnorm}()},
\code{\link{eidos_rnbinom}()},
\code{\link{eidos_rnorm}()},
\code{\link{eidos_round}()},
\code{\link{eidos_rpois}()},
\code{\link{eidos_runif}()},
\code{\link{eidos_rweibull}()},
\code{\link{eidos_sample}()},
\code{\link{eidos_sapply}()},
\code{\link{eidos_sd}()},
\code{\link{eidos_seq}()},
\code{\link{eidos_seqAlong}()},
\code{\link{eidos_seqLen}()},
\code{\link{eidos_setDifference}()},
\code{\link{eidos_setIntersection}()},
\code{\link{eidos_setSeed}()},
\code{\link{eidos_setSymmetricDifference}()},
\code{\link{eidos_setUnion}()},
\code{\link{eidos_setwd}()},
\code{\link{eidos_sin}()},
\code{\link{eidos_size}()},
\code{\link{eidos_sort}()},
\code{\link{eidos_sortBy}()},
\code{\link{eidos_source}()},
\code{\link{eidos_sqrt}()},
\code{\link{eidos_stop}()},
\code{\link{eidos_str}()},
\code{\link{eidos_strcontains}()},
\code{\link{eidos_strfind}()},
\code{\link{eidos_string}()},
\code{\link{eidos_strprefix}()},
\code{\link{eidos_strsplit}()},
\code{\link{eidos_strsuffix}()},
\code{\link{eidos_substr}()},
\code{\link{eidos_sum}()},
\code{\link{eidos_sumExact}()},
\code{\link{eidos_suppressWarnings}()},
\code{\link{eidos_sysinfo}()},
\code{\link{eidos_system}()},
\code{\link{eidos_t}()},
\code{\link{eidos_tabulate}()},
\code{\link{eidos_tan}()},
\code{\link{eidos_tempdir}()},
\code{\link{eidos_terrainColors}()},
\code{\link{eidos_time}()},
\code{\link{eidos_trunc}()},
\code{\link{eidos_ttest}()},
\code{\link{eidos_type}()},
\code{\link{eidos_unique}()},
\code{\link{eidos_upperTri}()},
\code{\link{eidos_usage}()},
\code{\link{eidos_var}()},
\code{\link{eidos_version}()},
\code{\link{eidos_which}()},
\code{\link{eidos_whichMax}()},
\code{\link{eidos_whichMin}()},
\code{\link{eidos_writeFile}()},
\code{\link{eidos_writeTempFile}()}
}
\author{
Benjamin C Haller (\email{bhaller@benhaller.com}) and Philipp W Messer
(\email{messer@cornell.edu})
}
\concept{Eidos}
