% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/slim_lang.R
\name{eidos_sapply}
\alias{eidos_sapply}
\alias{Eidos$sapply}
\alias{.E$sapply}
\title{Eidos method sapply}
\usage{
eidos_sapply(x, lambdaSource, simplify)
}
\arguments{
\item{x}{An object of type any or string or string. See details for description.}

\item{lambdaSource}{An object of type any or string or string. Must be of length
1 (a singleton). See details for description.}

\item{simplify}{An object of type any or string or string. Must be of length
1 (a singleton). The default value is \code{"vector"}. See details for
description.}
}
\value{
An object of type any.
}
\description{
Documentation for Eidos function \code{sapply}, which is a method of
\code{\link{Eidos}}.
Note that the R function is a stub, it does not do anything in R (except bring
up this documentation). It will only do
anything useful when used inside a \code{\link{slim_block}} function further
nested in a \code{\link{slim_script}}
function call, where it will be translated into valid SLiM code as part of a
full SLiM script.
}
\details{
Documentation for this function can be found in the official
\href{http://benhaller.com/slim/SLiM_Manual.pdf#page=NA}{SLiM manual: page NA}.

Named apply() prior to Eidos 1.6 / SLiM 2.6 Applies a block of Eidos
code to the elements of x. This function is sort of a hybrid between c() and
executeLambda(); it might be useful to consult the documentation for both of
those functions to better understand what sapply() does. For each element in
x, the lambda defined by lambdaSource will be called. For the duration of that
callout, a variable named applyValue will be defined to have as its value the
element of x currently being processed. The expectation is that the lambda
will use applyValue in some way, and will return either NULL or a new value
(which need not be a singleton, and need not be of the same type as x). The
return value of sapply() is generated by concatenating together all of the
individual vectors returned by the lambda, in exactly the same manner as the
c() function (including the possibility of type promotion). Since this function
can be hard to understand at first, here is an example: sapply(1:10, "if
(applyValue % 2) applyValue ^ 2; else NULL;"); This produces the output 1 9 25
49 81. The sapply() operation begins with the vector 1:10. For each element of
that vector, the lambda is called and applyValue is defined with the element
value. In this respect, sapply() is actually very much like a for loop. If
applyValue is even (as evaluated by the modulo operator, %), the condition of
the if statement is F and so NULL is returned by the lambda; this must be done
explicitly, since a void return is not allowed by sapply(). If applyValue is
odd, on the other hand, the lambda returns its square (as calculated by the
exponential operator, ^). Just as with the c() function, NULL values are dropped
during concatenation, so the final result contains only the squares of the odd
values. This example illustrates that the lambda can "drop" values by returning
NULL, so sapply() can be used to select particular elements of a vector that
satisfy some condition, much like the subscript operator, []. The example also
illustrates that input and result types do not have to match; the vector passed
in is integer, whereas the result vector is float. Beginning in Eidos 1.6, a new
optional parameter named simplify allows the result of sapply() to be a matrix
or array in certain cases, better organizing the elements of the result. If the
simplify 82 parameter is "vector", the concatenated result value is returned
as a plain vector in all cases; this is the default behavior, for backward
compatibility. Two other possible values for simplify are presently supported.
If simplify is "matrix", the concatenated result value will be turned into a
matrix with one column for each non-NULL value returned by the lambda, as if
the values were joined together with cbind(), as long as all of the lambda's
return values are either (a) NULL or (b) the same length as the other non-NULL
values returned. If simplify is "match", the concatenated result value will
be turned into a vector, matrix, or array that exactly matches the dimensions
as x, with a one-toone correspondence between x and the elements of the return
value just like a unary operator, as long as all of the lambda's return values
are singletons (with no NULL values). Both "matrix" and "match" will raise an
error if their preconditions are not met, to avoid unexpected behavior, so care
should be taken that the preconditions are always met when these options are
used. As with executeLambda(), all defined variables are accessible within the
lambda, and changes made to variables inside the lambda will persist beyond the
end of the sapply() call; the lambda is executing in the same scope as the rest
of your code. The sapply() function can seem daunting at first, but it is an
essential tool in the Eidos toolbox. It combines the iteration of a for loop,
the ability to select elements like operator [], and the ability to assemble
results of mixed type together into a single vector like c(), all with the power
of arbitrary Eidos code execution like executeLambda(). It is relatively fast,
compared to other ways of achieving similar results such as a for loop that
accumulates results with c(). Like executeLambda(), sapply() is most efficient
if it is called multiple times with a single string script variable, rather than
with a newly constructed string for lambdaSource each time. Prior to Eidos 1.6
(SLiM 2.6), sapply() was instead named apply(); it was renamed to sapply() in
order to more closely match the naming of functions in R. This renaming allowed
a new apply() function to be added to Eidos that operates on the margins of
matrices and arrays, similar to the apply() function of R (see apply(), above).
}
\section{Copyright}{

This is documentation for a function in the SLiM software, and has been
reproduced from the official manual,
which can be found here: \url{http://benhaller.com/slim/SLiM_Manual.pdf}. This
documentation is
Copyright Â© 2016-2020 Philipp Messer. All rights reserved. More information
about SLiM can be found
on the official website: \url{https://messerlab.org/slim/}
}

\seealso{
Other Eidos: 
\code{\link{E}},
\code{\link{eidos_abs}()},
\code{\link{eidos_acos}()},
\code{\link{eidos_all}()},
\code{\link{eidos_any}()},
\code{\link{eidos_apply}()},
\code{\link{eidos_array}()},
\code{\link{eidos_asFloat}()},
\code{\link{eidos_asInteger}()},
\code{\link{eidos_asLogical}()},
\code{\link{eidos_asString}()},
\code{\link{eidos_asin}()},
\code{\link{eidos_assert}()},
\code{\link{eidos_atan2}()},
\code{\link{eidos_atan}()},
\code{\link{eidos_beep}()},
\code{\link{eidos_catn}()},
\code{\link{eidos_cat}()},
\code{\link{eidos_cbind}()},
\code{\link{eidos_ceil}()},
\code{\link{eidos_citation}()},
\code{\link{eidos_clock}()},
\code{\link{eidos_cmColors}()},
\code{\link{eidos_color2rgb}()},
\code{\link{eidos_colors}()},
\code{\link{eidos_cor}()},
\code{\link{eidos_cos}()},
\code{\link{eidos_cov}()},
\code{\link{eidos_createDirectory}()},
\code{\link{eidos_cumProduct}()},
\code{\link{eidos_cumSum}()},
\code{\link{eidos_c}()},
\code{\link{eidos_date}()},
\code{\link{eidos_dbeta}()},
\code{\link{eidos_debugIndent}()},
\code{\link{eidos_defineConstant}()},
\code{\link{eidos_defineGlobal}()},
\code{\link{eidos_deleteFile}()},
\code{\link{eidos_dexp}()},
\code{\link{eidos_dgamma}()},
\code{\link{eidos_diag}()},
\code{\link{eidos_dim}()},
\code{\link{eidos_dmvnorm}()},
\code{\link{eidos_dnorm}()},
\code{\link{eidos_drop}()},
\code{\link{eidos_elementType}()},
\code{\link{eidos_exists}()},
\code{\link{eidos_exp}()},
\code{\link{eidos_fileExists}()},
\code{\link{eidos_filesAtPath}()},
\code{\link{eidos_findInterval}()},
\code{\link{eidos_float}()},
\code{\link{eidos_floor}()},
\code{\link{eidos_flushFile}()},
\code{\link{eidos_format}()},
\code{\link{eidos_functionSignature}()},
\code{\link{eidos_functionSource}()},
\code{\link{eidos_getSeed}()},
\code{\link{eidos_getwd}()},
\code{\link{eidos_heatColors}()},
\code{\link{eidos_hsv2rgb}()},
\code{\link{eidos_identical}()},
\code{\link{eidos_ifelse}()},
\code{\link{eidos_integerDiv}()},
\code{\link{eidos_integerMod}()},
\code{\link{eidos_integer}()},
\code{\link{eidos_isFinite}()},
\code{\link{eidos_isFloat}()},
\code{\link{eidos_isInfinite}()},
\code{\link{eidos_isInteger}()},
\code{\link{eidos_isLogical}()},
\code{\link{eidos_isNAN}()},
\code{\link{eidos_isNULL}()},
\code{\link{eidos_isObject}()},
\code{\link{eidos_isString}()},
\code{\link{eidos_length}()},
\code{\link{eidos_license}()},
\code{\link{eidos_log10}()},
\code{\link{eidos_log2}()},
\code{\link{eidos_logical}()},
\code{\link{eidos_log}()},
\code{\link{eidos_lowerTri}()},
\code{\link{eidos_ls}()},
\code{\link{eidos_match}()},
\code{\link{eidos_matrixMult}()},
\code{\link{eidos_matrix}()},
\code{\link{eidos_max}()},
\code{\link{eidos_mean}()},
\code{\link{eidos_min}()},
\code{\link{eidos_nchar}()},
\code{\link{eidos_ncol}()},
\code{\link{eidos_nrow}()},
\code{\link{eidos_object}()},
\code{\link{eidos_order}()},
\code{\link{eidos_paste0}()},
\code{\link{eidos_paste}()},
\code{\link{eidos_pmax}()},
\code{\link{eidos_pmin}()},
\code{\link{eidos_pnorm}()},
\code{\link{eidos_print}()},
\code{\link{eidos_product}()},
\code{\link{eidos_qnorm}()},
\code{\link{eidos_quantile}()},
\code{\link{eidos_rainbow}()},
\code{\link{eidos_range}()},
\code{\link{eidos_rank}()},
\code{\link{eidos_rbeta}()},
\code{\link{eidos_rbind}()},
\code{\link{eidos_rbinom}()},
\code{\link{eidos_rcauchy}()},
\code{\link{eidos_rdunif}()},
\code{\link{eidos_readCSV}()},
\code{\link{eidos_readFile}()},
\code{\link{eidos_repEach}()},
\code{\link{eidos_rep}()},
\code{\link{eidos_rev}()},
\code{\link{eidos_rexp}()},
\code{\link{eidos_rf}()},
\code{\link{eidos_rgamma}()},
\code{\link{eidos_rgb2color}()},
\code{\link{eidos_rgb2hsv}()},
\code{\link{eidos_rgeom}()},
\code{\link{eidos_rlnorm}()},
\code{\link{eidos_rmvnorm}()},
\code{\link{eidos_rm}()},
\code{\link{eidos_rnbinom}()},
\code{\link{eidos_rnorm}()},
\code{\link{eidos_round}()},
\code{\link{eidos_rpois}()},
\code{\link{eidos_runif}()},
\code{\link{eidos_rweibull}()},
\code{\link{eidos_sample}()},
\code{\link{eidos_sd}()},
\code{\link{eidos_seqAlong}()},
\code{\link{eidos_seqLen}()},
\code{\link{eidos_seq}()},
\code{\link{eidos_setDifference}()},
\code{\link{eidos_setIntersection}()},
\code{\link{eidos_setSeed}()},
\code{\link{eidos_setSymmetricDifference}()},
\code{\link{eidos_setUnion}()},
\code{\link{eidos_setwd}()},
\code{\link{eidos_sin}()},
\code{\link{eidos_size}()},
\code{\link{eidos_sortBy}()},
\code{\link{eidos_sort}()},
\code{\link{eidos_source}()},
\code{\link{eidos_sqrt}()},
\code{\link{eidos_stop}()},
\code{\link{eidos_strcontains}()},
\code{\link{eidos_strfind}()},
\code{\link{eidos_string}()},
\code{\link{eidos_strprefix}()},
\code{\link{eidos_strsplit}()},
\code{\link{eidos_strsuffix}()},
\code{\link{eidos_str}()},
\code{\link{eidos_substr}()},
\code{\link{eidos_sumExact}()},
\code{\link{eidos_sum}()},
\code{\link{eidos_suppressWarnings}()},
\code{\link{eidos_sysinfo}()},
\code{\link{eidos_system}()},
\code{\link{eidos_tabulate}()},
\code{\link{eidos_tan}()},
\code{\link{eidos_tempdir}()},
\code{\link{eidos_terrainColors}()},
\code{\link{eidos_time}()},
\code{\link{eidos_trunc}()},
\code{\link{eidos_ttest}()},
\code{\link{eidos_type}()},
\code{\link{eidos_t}()},
\code{\link{eidos_unique}()},
\code{\link{eidos_upperTri}()},
\code{\link{eidos_usage}()},
\code{\link{eidos_var}()},
\code{\link{eidos_version}()},
\code{\link{eidos_whichMax}()},
\code{\link{eidos_whichMin}()},
\code{\link{eidos_which}()},
\code{\link{eidos_writeFile}()},
\code{\link{eidos_writeTempFile}()}
}
\author{
Benjamin C Haller (\email{bhaller@benhaller.com}) and Philipp W Messer
(\email{messer@cornell.edu})
}
\concept{Eidos}
