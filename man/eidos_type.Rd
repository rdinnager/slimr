% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/slim_lang.R
\name{eidos_type}
\alias{eidos_type}
\alias{Eidos$type}
\alias{.E$type}
\title{Eidos method type}
\usage{
eidos_type(x)
}
\arguments{
\item{x}{An object of type any. See details for description.}
}
\value{
An object of type string. Return will be of length 1 (a singleton)
}
\description{
Documentation for Eidos function \code{type}, which is a method of
\code{\link{Eidos}}.
Note that the R function is a stub, it does not do anything in R (except bring
up this documentation). It will only do
anything useful when used inside a \code{\link{slim_block}} function further
nested in a \code{\link{slim_script}}
function call, where it will be translated into valid SLiM code as part of a
full SLiM script.
}
\details{
Documentation for this function can be found in the official
\href{http://benhaller.com/slim/SLiM_Manual.pdf#page=NA}{SLiM manual: page NA}.

Returns the type of x, as a string: "NULL", "logical", "integer",
"float", "string", or "object". Contrast this with elementType().
(lis)grep(string$ pattern, string x, [logical$ ignoreCase = F], [string$ grammar
= "ECMAScript"], [string$ value = "indices"], [logical$ fixed = F], [logical$
invert = F]) Searches for regular expression matches in the string-elements of
x. Regular expressions (regexes) express patterns that strings can either match
or not match; they are very widely used in programming languages and terminal
shells. The topic of regexes is very complex, and a great deal of information
about them can be found online, including examples and tutorials; this manual
will not attempt to document the topic in detail. The grep() function uses a
regex supplied in pattern, looking for matches for the regex in each element
of x. If ignoreCase is F (the default), the pattern matching will be case
sensitive (i.e., uppercase versus lowercase will matter); if it is T, the
pattern matching will be case-insensitive. 68 The grammar parameter determines
the regex grammar used to find matches. Several options are available. The
default, "ECMAScript", is a straightforward regex grammar, the specification
for which can be found at https://www.cplusplus.com/reference/regex/ECMAScript/
among many other links. The "basic" grammar uses POSIX basic
regular expressions, often called BRE; this is documented at
https://en.wikibooks.org/wiki/Regular_Expressions/POSIX_Basic_Regular_Expressions.
The "extended" grammar uses POSIX extended regular
expressions, often called ERE; this is documented at
https://en.wikibooks.org/wiki/Regular_Expressions/POSIX-Extended_Regular_Expressions.
The "awk" grammar is based upon the "extended" grammar, with more escapes for
non-printing characters. The "grep" and "egrep" grammars are based upon the
"basic" and "extended" grammars, respectively, but also allow newline characters
("\\n") to separate alternations. If you are not sure which grammar you want
to use, "ECMAScript" is recommended. All of these grammars are implemented
internally in Eidos using the C++ <regex> library, so if you need clarification
on the details of a grammar, you can search for related C++ materials online.
Information about the matches found is returned in one of four ways. If value is
"indices" (the default), an integer vector is returned containing the index in
x for each match. If value is "elements", a string vector is returned containing
the actual string-elements of x for each match. If value is "matches", a
string vector is returned containing only the substring that matched, within
each string-element in x that matched (if more than one substring in a given
element matched, the first match is returned). Finally, if value is "logical"
a logical vector is returned, of the same length as x, containing T where the
corresponding element of x matched, or F where it did not match. This function
therefore encapsulates the functionality of both the grep() and grepl()
functions of R; use value="logical" for functionality like that of R's grepl().
If fixed is F (the default), matching is determined using pattern following the
specified regex grammar as described above. If fixed is T, matching is instead
determined using pattern as a string value to be matched "as is", rather than
as a regular expression; the grammar specified does not matter in this case,
but ignoreCase still applies. This could be thought of as another grammar value,
really, meaning "no grammar", but it is supplied as a separate flag following R.
Finally, if invert if F (the default) matching proceeds as normal for the chosen
regex grammar, whereas if invert if T matching is inverted: indices, elements,
or logical values are returned for the elements of x that did not match. If
invert is T, the value parameter may not be "matches". Note that there is not
presently any way to extract subpattern matches, nor is there any way to perform
replacements of matches.
}
\section{Copyright}{

This is documentation for a function in the SLiM software, and has been
reproduced from the official manual,
which can be found here: \url{http://benhaller.com/slim/SLiM_Manual.pdf}. This
documentation is
Copyright Â© 2016-2020 Philipp Messer. All rights reserved. More information
about SLiM can be found
on the official website: \url{https://messerlab.org/slim/}
}

\seealso{
Other Eidos: 
\code{\link{E}},
\code{\link{eidos_abs}()},
\code{\link{eidos_acos}()},
\code{\link{eidos_all}()},
\code{\link{eidos_any}()},
\code{\link{eidos_apply}()},
\code{\link{eidos_array}()},
\code{\link{eidos_asFloat}()},
\code{\link{eidos_asInteger}()},
\code{\link{eidos_asLogical}()},
\code{\link{eidos_asString}()},
\code{\link{eidos_asin}()},
\code{\link{eidos_assert}()},
\code{\link{eidos_atan2}()},
\code{\link{eidos_atan}()},
\code{\link{eidos_beep}()},
\code{\link{eidos_catn}()},
\code{\link{eidos_cat}()},
\code{\link{eidos_cbind}()},
\code{\link{eidos_ceil}()},
\code{\link{eidos_citation}()},
\code{\link{eidos_clock}()},
\code{\link{eidos_cmColors}()},
\code{\link{eidos_color2rgb}()},
\code{\link{eidos_colors}()},
\code{\link{eidos_cor}()},
\code{\link{eidos_cos}()},
\code{\link{eidos_cov}()},
\code{\link{eidos_createDirectory}()},
\code{\link{eidos_cumProduct}()},
\code{\link{eidos_cumSum}()},
\code{\link{eidos_c}()},
\code{\link{eidos_date}()},
\code{\link{eidos_dbeta}()},
\code{\link{eidos_debugIndent}()},
\code{\link{eidos_defineConstant}()},
\code{\link{eidos_defineGlobal}()},
\code{\link{eidos_deleteFile}()},
\code{\link{eidos_dexp}()},
\code{\link{eidos_dgamma}()},
\code{\link{eidos_diag}()},
\code{\link{eidos_dim}()},
\code{\link{eidos_dmvnorm}()},
\code{\link{eidos_dnorm}()},
\code{\link{eidos_drop}()},
\code{\link{eidos_elementType}()},
\code{\link{eidos_exists}()},
\code{\link{eidos_exp}()},
\code{\link{eidos_fileExists}()},
\code{\link{eidos_filesAtPath}()},
\code{\link{eidos_findInterval}()},
\code{\link{eidos_float}()},
\code{\link{eidos_floor}()},
\code{\link{eidos_flushFile}()},
\code{\link{eidos_format}()},
\code{\link{eidos_functionSignature}()},
\code{\link{eidos_functionSource}()},
\code{\link{eidos_getSeed}()},
\code{\link{eidos_getwd}()},
\code{\link{eidos_heatColors}()},
\code{\link{eidos_hsv2rgb}()},
\code{\link{eidos_identical}()},
\code{\link{eidos_ifelse}()},
\code{\link{eidos_integerDiv}()},
\code{\link{eidos_integerMod}()},
\code{\link{eidos_integer}()},
\code{\link{eidos_isFinite}()},
\code{\link{eidos_isFloat}()},
\code{\link{eidos_isInfinite}()},
\code{\link{eidos_isInteger}()},
\code{\link{eidos_isLogical}()},
\code{\link{eidos_isNAN}()},
\code{\link{eidos_isNULL}()},
\code{\link{eidos_isObject}()},
\code{\link{eidos_isString}()},
\code{\link{eidos_length}()},
\code{\link{eidos_license}()},
\code{\link{eidos_log10}()},
\code{\link{eidos_log2}()},
\code{\link{eidos_logical}()},
\code{\link{eidos_log}()},
\code{\link{eidos_lowerTri}()},
\code{\link{eidos_ls}()},
\code{\link{eidos_match}()},
\code{\link{eidos_matrixMult}()},
\code{\link{eidos_matrix}()},
\code{\link{eidos_max}()},
\code{\link{eidos_mean}()},
\code{\link{eidos_min}()},
\code{\link{eidos_nchar}()},
\code{\link{eidos_ncol}()},
\code{\link{eidos_nrow}()},
\code{\link{eidos_object}()},
\code{\link{eidos_order}()},
\code{\link{eidos_paste0}()},
\code{\link{eidos_paste}()},
\code{\link{eidos_pmax}()},
\code{\link{eidos_pmin}()},
\code{\link{eidos_pnorm}()},
\code{\link{eidos_print}()},
\code{\link{eidos_product}()},
\code{\link{eidos_qnorm}()},
\code{\link{eidos_quantile}()},
\code{\link{eidos_rainbow}()},
\code{\link{eidos_range}()},
\code{\link{eidos_rank}()},
\code{\link{eidos_rbeta}()},
\code{\link{eidos_rbind}()},
\code{\link{eidos_rbinom}()},
\code{\link{eidos_rcauchy}()},
\code{\link{eidos_rdunif}()},
\code{\link{eidos_readCSV}()},
\code{\link{eidos_readFile}()},
\code{\link{eidos_repEach}()},
\code{\link{eidos_rep}()},
\code{\link{eidos_rev}()},
\code{\link{eidos_rexp}()},
\code{\link{eidos_rf}()},
\code{\link{eidos_rgamma}()},
\code{\link{eidos_rgb2color}()},
\code{\link{eidos_rgb2hsv}()},
\code{\link{eidos_rgeom}()},
\code{\link{eidos_rlnorm}()},
\code{\link{eidos_rmvnorm}()},
\code{\link{eidos_rm}()},
\code{\link{eidos_rnbinom}()},
\code{\link{eidos_rnorm}()},
\code{\link{eidos_round}()},
\code{\link{eidos_rpois}()},
\code{\link{eidos_runif}()},
\code{\link{eidos_rweibull}()},
\code{\link{eidos_sample}()},
\code{\link{eidos_sapply}()},
\code{\link{eidos_sd}()},
\code{\link{eidos_seqAlong}()},
\code{\link{eidos_seqLen}()},
\code{\link{eidos_seq}()},
\code{\link{eidos_setDifference}()},
\code{\link{eidos_setIntersection}()},
\code{\link{eidos_setSeed}()},
\code{\link{eidos_setSymmetricDifference}()},
\code{\link{eidos_setUnion}()},
\code{\link{eidos_setwd}()},
\code{\link{eidos_sin}()},
\code{\link{eidos_size}()},
\code{\link{eidos_sortBy}()},
\code{\link{eidos_sort}()},
\code{\link{eidos_source}()},
\code{\link{eidos_sqrt}()},
\code{\link{eidos_stop}()},
\code{\link{eidos_strcontains}()},
\code{\link{eidos_strfind}()},
\code{\link{eidos_string}()},
\code{\link{eidos_strprefix}()},
\code{\link{eidos_strsplit}()},
\code{\link{eidos_strsuffix}()},
\code{\link{eidos_str}()},
\code{\link{eidos_substr}()},
\code{\link{eidos_sumExact}()},
\code{\link{eidos_sum}()},
\code{\link{eidos_suppressWarnings}()},
\code{\link{eidos_sysinfo}()},
\code{\link{eidos_system}()},
\code{\link{eidos_tabulate}()},
\code{\link{eidos_tan}()},
\code{\link{eidos_tempdir}()},
\code{\link{eidos_terrainColors}()},
\code{\link{eidos_time}()},
\code{\link{eidos_trunc}()},
\code{\link{eidos_ttest}()},
\code{\link{eidos_t}()},
\code{\link{eidos_unique}()},
\code{\link{eidos_upperTri}()},
\code{\link{eidos_usage}()},
\code{\link{eidos_var}()},
\code{\link{eidos_version}()},
\code{\link{eidos_whichMax}()},
\code{\link{eidos_whichMin}()},
\code{\link{eidos_which}()},
\code{\link{eidos_writeFile}()},
\code{\link{eidos_writeTempFile}()}
}
\author{
Benjamin C Haller (\email{bhaller@benhaller.com}) and Philipp W Messer
(\email{messer@cornell.edu})
}
\concept{Eidos}
