% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/slim_lang.R
\name{eidos_usage}
\alias{eidos_usage}
\alias{Eidos$usage}
\alias{.E$usage}
\title{Eidos method usage}
\usage{
eidos_usage(type)
}
\arguments{
\item{type}{An object of type logical or string. Must be of length 1 (a
singleton). The default value is \code{"rss"}. See details for description.}
}
\value{
An object of type float. Return will be of length 1 (a singleton)
}
\description{
Documentation for Eidos function \code{usage}, which is a method of
\code{\link{Eidos}}.
Note that the R function is a stub, it does not do anything in R (except bring
up this documentation). It will only do
anything useful when used inside a \code{\link{slim_block}} function further
nested in a \code{\link{slim_script}}
function call, where it will be translated into valid SLiM code as part of a
full SLiM script.
}
\details{
Documentation for this function can be found in the official
\href{http://benhaller.com/slim/SLiM_Manual.pdf#page=NA}{SLiM manual: page NA}.

Returns the memory usage. This is the amount of memory used by the
current process, in MB (megabytes); multiply by 1024*1024 to get the usage
in bytes. Memory usage is a surprisingly complex topic. One metric reported
by usage() is the resident set size, or RSS, which includes memory usage from
shared libraries, but does not include memory that is swapped out or has never
been used. For most purposes, RSS is a useful metric of memory usage from
a practical perspective. On some platforms (AIX, BSD, Solaris) the memory
usage reported may be zero, but it should be correct on both macOS and Linux
platforms. On macOS, memory pages that have not been used for a while may
get compressed by the kernel to reduce the RSS of the process; the RSS metric
reported by usage() will reflect the compressed size of such pages, not their
original size, so surprising decreases in memory usage may be observed when
the kernel decides to compress some memory pages. The RSS is requested with
a type of "rss", which is the default; for historical reasons, it can also
be requested with a type of F. Another metric reported by usage() is the peak
RSS. This is just the highest RSS value that has ever been recorded by the
kernel. It should generally mirror the behavior of RSS, except that it ratchets
upward monotonically. The peak RSS is requested with a type of "rss_peak"; for
historical reasons, it can also be requested with a type of T. The third metric
currently reported by usage() is the virtual memory usage. This is essentially
the amount of memory used by pages that have been assigned to the process,
whether those pages are resident, compressed, or swapped. It is typically
much larger than the RSS, because it includes various types of memory that
are not counted in the RSS; indeed, for some system configurations the virtual
memory usage can be reported as being the entire memory space of the computer.
Whether it is a useful metric will be platform-dependent; caveat emptor. This
function can be useful for documenting the memory usage of long runs as they
are in progress. In SLiM, the RSS could also be used to trigger tree-sequence
simplification with a call to treeSeqSimplify(), to reduce memory usage when
it becomes too large, but keep in mind that the simplification process itself
may cause a substantial spike in memory usage, and that page compression and
swaps may reduce the RSS even though the memory actually used by tree-sequence
recording continues to increase. When running under SLiM, other tools for
monitoring memory usage include the slim command-line options -m[em] and
-M[emhist], and the usage() and outputUsage() methods of Community; see the SLiM
manual for more information.
}
\section{Copyright}{

This is documentation for a function in the SLiM software, and has been
reproduced from the official manual,
which can be found here: \url{http://benhaller.com/slim/SLiM_Manual.pdf}. This
documentation is
Copyright Â© 2016-2020 Philipp Messer. All rights reserved. More information
about SLiM can be found
on the official website: \url{https://messerlab.org/slim/}
}

\seealso{
Other Eidos: 
\code{\link{E}},
\code{\link{eidos_abs}()},
\code{\link{eidos_acos}()},
\code{\link{eidos_all}()},
\code{\link{eidos_any}()},
\code{\link{eidos_apply}()},
\code{\link{eidos_array}()},
\code{\link{eidos_asFloat}()},
\code{\link{eidos_asInteger}()},
\code{\link{eidos_asLogical}()},
\code{\link{eidos_asString}()},
\code{\link{eidos_asin}()},
\code{\link{eidos_assert}()},
\code{\link{eidos_atan2}()},
\code{\link{eidos_atan}()},
\code{\link{eidos_beep}()},
\code{\link{eidos_catn}()},
\code{\link{eidos_cat}()},
\code{\link{eidos_cbind}()},
\code{\link{eidos_ceil}()},
\code{\link{eidos_citation}()},
\code{\link{eidos_clock}()},
\code{\link{eidos_cmColors}()},
\code{\link{eidos_color2rgb}()},
\code{\link{eidos_colors}()},
\code{\link{eidos_cor}()},
\code{\link{eidos_cos}()},
\code{\link{eidos_cov}()},
\code{\link{eidos_createDirectory}()},
\code{\link{eidos_cumProduct}()},
\code{\link{eidos_cumSum}()},
\code{\link{eidos_c}()},
\code{\link{eidos_date}()},
\code{\link{eidos_dbeta}()},
\code{\link{eidos_debugIndent}()},
\code{\link{eidos_defineConstant}()},
\code{\link{eidos_defineGlobal}()},
\code{\link{eidos_deleteFile}()},
\code{\link{eidos_dexp}()},
\code{\link{eidos_dgamma}()},
\code{\link{eidos_diag}()},
\code{\link{eidos_dim}()},
\code{\link{eidos_dmvnorm}()},
\code{\link{eidos_dnorm}()},
\code{\link{eidos_drop}()},
\code{\link{eidos_elementType}()},
\code{\link{eidos_exists}()},
\code{\link{eidos_exp}()},
\code{\link{eidos_fileExists}()},
\code{\link{eidos_filesAtPath}()},
\code{\link{eidos_findInterval}()},
\code{\link{eidos_float}()},
\code{\link{eidos_floor}()},
\code{\link{eidos_flushFile}()},
\code{\link{eidos_format}()},
\code{\link{eidos_functionSignature}()},
\code{\link{eidos_functionSource}()},
\code{\link{eidos_getSeed}()},
\code{\link{eidos_getwd}()},
\code{\link{eidos_heatColors}()},
\code{\link{eidos_hsv2rgb}()},
\code{\link{eidos_identical}()},
\code{\link{eidos_ifelse}()},
\code{\link{eidos_integerDiv}()},
\code{\link{eidos_integerMod}()},
\code{\link{eidos_integer}()},
\code{\link{eidos_isFinite}()},
\code{\link{eidos_isFloat}()},
\code{\link{eidos_isInfinite}()},
\code{\link{eidos_isInteger}()},
\code{\link{eidos_isLogical}()},
\code{\link{eidos_isNAN}()},
\code{\link{eidos_isNULL}()},
\code{\link{eidos_isObject}()},
\code{\link{eidos_isString}()},
\code{\link{eidos_length}()},
\code{\link{eidos_license}()},
\code{\link{eidos_log10}()},
\code{\link{eidos_log2}()},
\code{\link{eidos_logical}()},
\code{\link{eidos_log}()},
\code{\link{eidos_lowerTri}()},
\code{\link{eidos_ls}()},
\code{\link{eidos_match}()},
\code{\link{eidos_matrixMult}()},
\code{\link{eidos_matrix}()},
\code{\link{eidos_max}()},
\code{\link{eidos_mean}()},
\code{\link{eidos_min}()},
\code{\link{eidos_nchar}()},
\code{\link{eidos_ncol}()},
\code{\link{eidos_nrow}()},
\code{\link{eidos_object}()},
\code{\link{eidos_order}()},
\code{\link{eidos_paste0}()},
\code{\link{eidos_paste}()},
\code{\link{eidos_pmax}()},
\code{\link{eidos_pmin}()},
\code{\link{eidos_pnorm}()},
\code{\link{eidos_print}()},
\code{\link{eidos_product}()},
\code{\link{eidos_qnorm}()},
\code{\link{eidos_quantile}()},
\code{\link{eidos_rainbow}()},
\code{\link{eidos_range}()},
\code{\link{eidos_rank}()},
\code{\link{eidos_rbeta}()},
\code{\link{eidos_rbind}()},
\code{\link{eidos_rbinom}()},
\code{\link{eidos_rcauchy}()},
\code{\link{eidos_rdunif}()},
\code{\link{eidos_readCSV}()},
\code{\link{eidos_readFile}()},
\code{\link{eidos_repEach}()},
\code{\link{eidos_rep}()},
\code{\link{eidos_rev}()},
\code{\link{eidos_rexp}()},
\code{\link{eidos_rf}()},
\code{\link{eidos_rgamma}()},
\code{\link{eidos_rgb2color}()},
\code{\link{eidos_rgb2hsv}()},
\code{\link{eidos_rgeom}()},
\code{\link{eidos_rlnorm}()},
\code{\link{eidos_rmvnorm}()},
\code{\link{eidos_rm}()},
\code{\link{eidos_rnbinom}()},
\code{\link{eidos_rnorm}()},
\code{\link{eidos_round}()},
\code{\link{eidos_rpois}()},
\code{\link{eidos_runif}()},
\code{\link{eidos_rweibull}()},
\code{\link{eidos_sample}()},
\code{\link{eidos_sapply}()},
\code{\link{eidos_sd}()},
\code{\link{eidos_seqAlong}()},
\code{\link{eidos_seqLen}()},
\code{\link{eidos_seq}()},
\code{\link{eidos_setDifference}()},
\code{\link{eidos_setIntersection}()},
\code{\link{eidos_setSeed}()},
\code{\link{eidos_setSymmetricDifference}()},
\code{\link{eidos_setUnion}()},
\code{\link{eidos_setwd}()},
\code{\link{eidos_sin}()},
\code{\link{eidos_size}()},
\code{\link{eidos_sortBy}()},
\code{\link{eidos_sort}()},
\code{\link{eidos_source}()},
\code{\link{eidos_sqrt}()},
\code{\link{eidos_stop}()},
\code{\link{eidos_strcontains}()},
\code{\link{eidos_strfind}()},
\code{\link{eidos_string}()},
\code{\link{eidos_strprefix}()},
\code{\link{eidos_strsplit}()},
\code{\link{eidos_strsuffix}()},
\code{\link{eidos_str}()},
\code{\link{eidos_substr}()},
\code{\link{eidos_sumExact}()},
\code{\link{eidos_sum}()},
\code{\link{eidos_suppressWarnings}()},
\code{\link{eidos_sysinfo}()},
\code{\link{eidos_system}()},
\code{\link{eidos_tabulate}()},
\code{\link{eidos_tan}()},
\code{\link{eidos_tempdir}()},
\code{\link{eidos_terrainColors}()},
\code{\link{eidos_time}()},
\code{\link{eidos_trunc}()},
\code{\link{eidos_ttest}()},
\code{\link{eidos_type}()},
\code{\link{eidos_t}()},
\code{\link{eidos_unique}()},
\code{\link{eidos_upperTri}()},
\code{\link{eidos_var}()},
\code{\link{eidos_version}()},
\code{\link{eidos_whichMax}()},
\code{\link{eidos_whichMin}()},
\code{\link{eidos_which}()},
\code{\link{eidos_writeFile}()},
\code{\link{eidos_writeTempFile}()}
}
\author{
Benjamin C Haller (\email{bhaller@benhaller.com}) and Philipp W Messer
(\email{messer@cornell.edu})
}
\concept{Eidos}
