% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/slim_callbacks.R
\name{modifyChild}
\alias{modifyChild}
\title{SLiM modifyChild() callback}
\usage{
modifyChild(subpop_id)
}
\arguments{
\item{subpop_id}{The id(s) of the subpopulation(s) to which this callback should apply. Can
be an integer 1, 2, etc., or character "p1", "p2", etc.}
}
\value{
None
}
\description{
This callback specifies that a code block is providing logic to modify an offspring that has been produced
during a SLiM simulation, and is called for every offspring produced. The code should modify the pseudo-variables
associated with the child (see details) \code{child}, \code{childGenome1}, and \code{childGenome2}. It should also
return a single logical \code{T} or \code{F}. If \code{F}, the offspring will be discarded and the callback called again.
Make sure there is a non-zero probability of returning \code{T}, or the simulation could hang indefinitely.
see \href{http://benhaller.com/slim/SLiM_Manual.pdf#page=601}{SLiM Manual: page 601}
}
\details{
Global variables available in reproduction callbacks:
\describe{
  \item{child}{The generated child (an object of class Individual) }
  \item{childGenome1}{One genome of the generated child}
  \item{childGenome2}{The other genome of the generated child}
  \item{childIsFemale}{T if the child will be female, F if male (defined only if sex is enabled)}
  \item{parent1}{The first parent (an object of class Individual)}
  \item{parent1Genome1}{One genome of the first parent}
  \item{parent1Genome2}{The other genome of the first parent}
  \item{isCloning}{T if the child is the result of cloning}
  \item{isSelfing}{T if the child is the result of selfing}
  \item{parent2}{The second parent (an object of class Individual)}
  \item{parent2Genome1}{One genome of the second parent}
  \item{parent2Genome2}{The other genome of the second parent}
  \item{subpop}{The subpopulation in which the child will live}
  \item{sourceSubpop}{The subpopulation of the parents (==subpop if not a migration mating)}
}
}
\section{Copyright}{

This is documentation for a function in the SLiM software, and has been
modified from the official manual,
which can be found here: \url{http://benhaller.com/slim/SLiM_Manual.pdf}. This
documentation is
Copyright Â© 2016-2020 Philipp Messer. All rights reserved. More information
about SLiM can be found
on the official website: \url{https://messerlab.org/slim/}
}

\examples{
slim_block(modifyChild(), {

  # prevent hermaphroditic selfing
  if(parent1 == parent2) {
    return(F)
  }
  return(T)

})
}
\seealso{
Other callbacks: 
\code{\link{early}()},
\code{\link{first}()},
\code{\link{fitnessEffect}()},
\code{\link{fitness}()},
\code{\link{initialize}()},
\code{\link{interaction}()},
\code{\link{late}()},
\code{\link{mateChoice}()},
\code{\link{mutationEffect}()},
\code{\link{mutation}()},
\code{\link{recombination}()},
\code{\link{reproduction}()},
\code{\link{slim_callbacks}()},
\code{\link{survival}()}
}
\author{
Benjamin C Haller (\email{bhaller@benhaller.com}) and Philipp W Messer
(\email{messer@cornell.edu})
}
\concept{callbacks}
