% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/slimr_inline.R
\name{r_inline}
\alias{r_inline}
\alias{slimr_inline}
\title{Insert R objects into SLiM scripts}
\usage{
r_inline(object, delay = FALSE)

slimr_inline(object, delay = FALSE)
}
\arguments{
\item{object}{R object to inline into the SLiM script.}

\item{delay}{By default \code{r_inline} will insert the
value of \code{object} into the script when the script is
created (e.g. when \code{\link{slim_script}} is called).
However, setting \code{delay = TRUE} will delay the evaluation
of \code{object} until the script is rendered instead (e.g. when
\code{\link{slim_script_render}} is called). This allows you to
write a \code{slimr_script} before you have an object available
to be inlined (e.g. it allows you to have a 'placeholder'
for an object you plan to generate in R later).}
}
\value{
A character vector with the code generated for inlining.
}
\description{
By calling this function inside a \code{\link{slim_block}} function call you can insert R objects
into the script using direct inlining. This function should generally only be used within a
\code{\link{slim_block}} call
}
\details{
Currently supported R objects include all atomic vectors, matrices and arrays and \code{RasterLayer} objects.
Non-atomic vectors like factors are currently not supported and neither are any other special object types, though we
plan to support some in the future.
}
\examples{
popsizes <- c(100, 200, 300)
slim_script(
 slim_block(initialize(),
        {
          initializeMutationRate(1e-7);
          initializeMutationType("m1", 0.5, "f", 0.0);
          initializeGenomicElementType("g1", m1, 1.0);
          initializeGenomicElement(g1, 0, 99999);
          initializeRecombinationRate(1e-8);
        }),
 slim_block(1,
        {
          popsizes <- r_inline(popsizes)
          sim.addSubpop("p1", popsizes[1]);
          sim.addSubpop("p2", popsizes[2]);
          sim.addSubpop("p3", popsizes[3]);
        }),
 slim_block(10000,
        {
          sim.simulationFinished();
        })
)
}
