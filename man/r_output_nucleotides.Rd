% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/slimr_output.R
\name{r_output_nucleotides}
\alias{r_output_nucleotides}
\alias{slimr_output_nucleotides}
\title{Utility function to tell SLiM to output Nucleotides}
\usage{
r_output_nucleotides(
  name = "seqs",
  subpops = FALSE,
  both_genomes = FALSE,
  inds = NULL,
  ...
)

slimr_output_nucleotides(
  name = "seqs",
  subpops = FALSE,
  both_genomes = FALSE,
  inds = NULL,
  ...
)
}
\arguments{
\item{name}{Name of output to use to label it in \code{slimr_results object}. Default is \code{"seqs"}.}

\item{subpops}{Should the subpopulation of each sequence be outputted as well?}

\item{both_genomes}{Should both genomes be outputted? If `FALSE` only nucleotides from genome1 are outputted}

\item{inds}{SLiM expression that returns the individuals to get nucleotides from. By default all
individuals are returned.}

\item{...}{Other arguments to be passed to \code{\link{r_output}}}
}
\value{
None
}
\description{
Utility function to tell SLiM to output Nucleotides
}
\examples{
test_sim <- slim_script(
  slim_block(initialize(), {

    ## tell SLiM to simulate nucleotides
    initializeSLiMOptions(nucleotideBased=T);
    initializeAncestralNucleotides(randomNucleotides(1000));
    initializeMutationTypeNuc("m1", 0.5, "f", 0.0);

    initializeGenomicElementType("g1", m1, 1.0, mmJukesCantor(1e-5));
    initializeGenomicElement(g1, 0, 1000 - 1);
    initializeRecombinationRate(1e-8);

  }),
  slim_block_add_subpops(1, 100),
  slim_block(1, 20, late(), {
    r_output_nucleotides("out", do_every = 10)
  })
)
test_sim
}
