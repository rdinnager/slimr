% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/slim_lang.R
\name{recalculateFitness}
\alias{recalculateFitness}
\alias{SLiMSim$recalculateFitness}
\alias{.SS$recalculateFitness}
\title{SLiM method recalculateFitness}
\usage{
recalculateFitness(generation)
}
\arguments{
\item{generation}{An object of type null or integer. Must be of length 1 (a
singleton). The default value is \code{NULL}. See details for description.}
}
\value{
An object of type void.
}
\description{
Documentation for SLiM function \code{recalculateFitness}, which is a method of
the SLiM class \code{SLiMSim}.
Note that the R function is a stub, it does not do anything in R (except bring
up this documentation). It will only do
anything useful when used inside a \code{\link{slim_block}} function further
nested in a \code{\link{slim_script}}
function call, where it will be translated into valid SLiM code as part of a
full SLiM script.
}
\details{
Force an immediate recalculation of fitness values for all individuals
in all subpopulations. Normally fitness values are calculated at a fixed
point in each generation, and those values are cached and used throughout the
following generation. If simulation parameters are changed in script in a way
that affects fitness calculations, and if you wish those changes to take effect
immediately rather than taking effect at the end of the current generation,
you may call recalculateFitness() to force an immediate recalculation and
recache. The optional parameter generation provides the generation for which
fitness() callbacks should be selected; if it is NULL (the default), the
simulation’s current generation value, sim.generation, is used. If you call
recalculateFitness() in an early() event in a WF model, you may wish this
to be sim.generation - 1 in order to utilize the fitness() callbacks for the
previous generation, as if the changes that you have made to fitness-influencing
parameters were already in effect at the end of the previous generation when
the new generation was first created and evaluated (usually it is simpler
to just make such changes in a late() event instead, however, in which case
calling recalculateFitness() is probably not necessary at all since fitness
values will be recalculated immediately afterwards). Regardless of the value
supplied for generation here, sim.generation inside fitness() callbacks will
report the true generation number, so if your callbacks consult that parameter
in order to create generation-specific fitness effects you will need to handle
the discrepancy somehow. (Similar considerations apply for nonWF models that
call recalculateFitness() in a late() event, which is also not advisable in
general.) After this call, the fitness values used for all purposes in SLiM will
be the newly calculated values. Calling this method will trigger the calling of
any enabled and applicable fitness() callbacks, so this is quite a heavyweight
operation; you should think carefully about what side effects might result
(which is why fitness recalculation does not just occur automatically after
changes that might affect fitness values).
}
\section{Copyright}{

This is documentation for a function in the SLiM software, and has been
reproduced from the official manual,
which can be found here: \url{http://benhaller.com/slim/SLiM_Manual.pdf}. This
documentation is
Copyright © 2016–2020 Philipp Messer. All rights reserved. More information
about SLiM can be found
on the official website: \url{https://messerlab.org/slim/}
}

\author{
Benjamin C Haller (\email{bhaller@benhaller.com}) and Philipp W Messer
(\email{messer@cornell.edu})
}
