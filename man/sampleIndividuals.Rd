% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/slim_lang.R
\name{sampleIndividuals}
\alias{sampleIndividuals}
\alias{Subpopulation$sampleIndividuals}
\alias{.P$sampleIndividuals}
\title{SLiM method sampleIndividuals}
\usage{
sampleIndividuals(size, replace, exclude, sex, minAge, maxAge, migrant)
}
\arguments{
\item{size}{An object of type integer. Must be of length 1 (a singleton). See
details for description.}

\item{replace}{An object of type logical. Must be of length 1 (a singleton). The
default value is \code{F}. See details for description.}

\item{exclude}{An object of type null or Individual object. Must be of length 1
(a singleton). The default value is \code{NULL}. See details for description.}

\item{sex}{An object of type null or string. Must be of length 1 (a singleton).
The default value is \code{NULL],[Ni$ tag = NULL}. See details for description.}

\item{minAge}{An object of type null or integer. Must be of length 1 (a
singleton). The default value is \code{NULL}. See details for description.}

\item{maxAge}{An object of type null or integer. Must be of length 1 (a
singleton). The default value is \code{NULL}. See details for description.}

\item{migrant}{An object of type null or logical. Must be of length 1 (a
singleton). The default value is \code{NULL}. See details for description.}
}
\value{
An object of type Individual object.
}
\description{
Documentation for SLiM function \code{sampleIndividuals}, which is a method of
the SLiM class \code{Subpopulation}.
Note that the R function is a stub, it does not do anything in R (except bring
up this documentation). It will only do
anything useful when used inside a \code{\link{slim_block}} function further
nested in a \code{\link{slim_script}}
function call, where it will be translated into valid SLiM code as part of a
full SLiM script.
}
\details{
Returns a vector of individuals, of size less than or equal to
parameter size, sampled from the individuals in the target subpopulation.
Sampling is done without replacement if replace is F (the default), or with
replacement if replace is T. The remaining parameters specify constraints upon
the pool of individuals that will be considered candidates for the sampling.
Parameter exclude, if non- NULL, may specify a specific individual that
should not be considered a candidate (typically the focal individual in some
operation). Parameter sex, if non-NULL, may specify a sex ("M" or "F") for
the individuals to be drawn, in sexual models. Parameter tag, if non-NULL, may
specify a tag value for the individuals to be drawn; only individuals whose tag
property matches this value will be candidates. Parameters minAge and maxAge, if
non-NULL, may specify a minimum or maximum age for the individuals to be drawn,
in nonWF models. Parameter migrant, if non-NULL, may specify a required value
for the migrant property of the individuals to be drawn (so T will require that
individuals be migrants, F will require that they not be). If the candidate
pool is smaller than the requested sample size, all eligible candidates will be
returned (in randomized order); the result will be a zero-length vector if no
eligible candidates exist (unlike sample()). This method is similar to getting
the individuals property of the subpopulation, using operator [] to select only
individuals with the desired properties, and then using sample() to sample from
that candidate pool. However, besides being much simpler than the equivalent
Eidos code, it is also much faster, and it does not fail if less than the full
sample size is available. See subsetIndividuals() for a similar method that
returns a full subset, rather than a sample.
}
\section{Copyright}{

This is documentation for a function in the SLiM software, and has been
reproduced from the official manual,
which can be found here: \url{http://benhaller.com/slim/SLiM_Manual.pdf}. This
documentation is
Copyright © 2016–2020 Philipp Messer. All rights reserved. More information
about SLiM can be found
on the official website: \url{https://messerlab.org/slim/}
}

\author{
Benjamin C Haller (\email{bhaller@benhaller.com}) and Philipp W Messer
(\email{messer@cornell.edu})
}
