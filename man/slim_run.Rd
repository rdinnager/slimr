% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/slim_run.R
\name{slim_run}
\alias{slim_run}
\alias{slim_run.character}
\alias{slim_run.slimr_script}
\alias{slim_run.slimr_script_coll}
\title{Run a SLiM script from R}
\usage{
slim_run(
  x,
  slim_path = NULL,
  script_file = NULL,
  simple_run = FALSE,
  capture_output = FALSE,
  show_output = FALSE,
  new_grdev = FALSE,
  parallel = FALSE,
  progress = FALSE,
  throw_error = FALSE,
  ...
)

\method{slim_run}{character}(
  x,
  slim_path = NULL,
  script_file = NULL,
  simple_run = FALSE,
  capture_output = FALSE,
  show_output = FALSE,
  new_grdev = FALSE,
  parallel = FALSE,
  progress = FALSE,
  throw_error = FALSE,
  ...
)

\method{slim_run}{slimr_script}(
  x,
  slim_path = NULL,
  script_file = NULL,
  simple_run = FALSE,
  capture_output = FALSE,
  show_output = FALSE,
  new_grdev = FALSE,
  parallel = FALSE,
  progress = FALSE,
  throw_error = FALSE,
  ...
)

\method{slim_run}{slimr_script_coll}(
  x,
  slim_path = NULL,
  script_file = NULL,
  simple_run = FALSE,
  capture_output = FALSE,
  show_output = FALSE,
  new_grdev = FALSE,
  parallel = FALSE,
  progress = FALSE,
  throw_error = FALSE,
  ...
)
}
\arguments{
\item{x}{Object containing script to run (e.g. a character vector or a slimr_script object)}

\item{slim_path}{Path to the SLiM executable. If left \code{NULL} \code{slimr} will attempt to automatically determine
it, typically by examining environmental variables.}

\item{script_file}{If the script you want to run is in a text file, you can add the path here. If this is
argument is not \code{NULL} argument \code{x} will be ignored}

\item{simple_run}{Whether to do a "simple run", which just runs the script, capturing all output is \code{capture_output}
is \code{TRUE} and additionally sending all output to the R console if \code{show_output} is \code{TRUE}
the script to the R console if show_output is TRUE}

\item{capture_output}{If \code{TRUE}, output from the script will be captured and included in the returned object. Only
affects non-data output (e.g. output not produced by a \code{r_output}, which is always captured)}

\item{show_output}{Should output from the script be sent to the R console? Note that SLiM scripts can sometimes produce a
large amount of output, which could overwhelm the console if you are not careful, potentially locking it up. Be careful
with this option if you are using any of SLiM's output functions that output genomic data. This can be handy though
for simply status print outs.. Note that only output that is not part of the data output by \code{r_output} calls will be
printed to the console.}

\item{new_grdev}{\strong{*deprecated*} Should a new graphics device window be opened on RStudio? This is mainly useful if you are using
custom callbacks that generate live figures, and want a faster plotting experience. This is because the
default plot viewer in RStudio can be quite slow. Setting this to \code{TRUE} also allows \code{record_graphics} to work.}

\item{parallel}{If \code{x} is a \code{slimr_script_coll}, should the elements in \code{x}
be run in parallel. For this to work, you must have setup a parallel plan using \code{\link[future]{plan}}}

\item{progress}{Should a progress bar be displayed?}

\item{throw_error}{Should an error be thrown in R is an error is encountered in SLiM?
If \code{FALSE}, the error message from SLiM is stored in the object returned
by \code{slim_run}, but execution continues in R. Setting this to \code{TRUE} is useful
in a script if subsequent code assumes that the simulation finished successfully.}

\item{...}{Additional arguments to be passed to or from other methods.}
}
\value{
A \code{slimr_results} object which has the following components:
\describe{
\item{output}{A character vector of raw output. Will be NULL if \code{capture_output} is \code{FALSE}}
\item{exit_status}{The exit status code returned by the SLiM process. 0 means success.}
\item{output_data}{A `tibble` containing output from \code{r_output} calls.}
\item{process}{A \code{processx} object containing information about the SLiM process used during the run.}
\item{error}{If an error was encountered during the run, this will be a character vector containing the error message.}
\item{output_file}{The path to the file containing captured output from SLiM during the run.}
}
}
\description{
This function runs a SLiM script, specified as a \code{slimr_script} object,
a character vector, or a text file.
}
\section{Methods (by class)}{
\itemize{
\item \code{slim_run(character)}: Run a SLiM script from character vector

\item \code{slim_run(slimr_script)}: Run a SLiM script from slimr_script object

\item \code{slim_run(slimr_script_coll)}: Run a SLiM script from slimr_script object

}}
\examples{
if(slim_is_avail()) {
  test_sim <- slim_script(
    slim_block_init_minimal(mutation_rate = 1e-6),
    slim_block_add_subpops(1, 100),
    slim_block(1, 20, late(), {
      r_output(sim.outputFull(), "out", do_every = 10)
    })
  ) \%>\%
    slim_run()
  test_sim
}
}
